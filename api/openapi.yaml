openapi: 3.0.1
info:
  version: 1.0.0
  title: Hacker News (ProjecteG14B)
  description: "This is the Open API documentation for the REST API of our beloved application **Hacker News** deployed at <https://hackernews-projecteg14b.herokuapp.com/>. <br>¡ATENCIÓN, ESTÁ PENDIENTE! All operations are executable. Only one operation requires authentication: `deleteTweet`. In this case, you must **Authorize** your request by providing the api_key vaule you got when you created the tweet."
servers:
  - url: 'https://hackernews-projecteg14b.herokuapp.com/'
  - url: 'http://18.213.245.219:8080'
paths:
  /contributions:
    get:
        tags:
        - contributions
        summary: Retrieves all the Contributions of type url (ordered by points), of type ask (ordered by points), of type all (ordered by creation), created by one user or voted by one user
        operationId: getContributions
        parameters:
        - name: type
          in: query
          description: Contribution type to filter
          required: false
          schema:
            type: string
            enum: [all, url, ask]
        - name: user_id
          in: query
          description: Contribution user to filter
          schema:
            type: integer
        - name: upvotedS
          in: query
          description: User to look for upvoted contributions
          schema:
            type: integer
        responses:
          200:
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Contribution'
          404:
            description: 'Error: Not Found'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorUserExample:
                    $ref: '#/components/examples/error404User'
          401:
            description: 'Error: Unauthorized'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorMissingAuthenticationExample:
                    $ref: '#/components/examples/error401UnauthorizedMissingAuthentication'
                  errorIncorrectAuthenticationExample:
                    $ref: '#/components/examples/error401UnauthorizedIncorrectAuthentication'
          403:
            description: 'Error: Forbidden'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorPrivilegeNotGrantedExample:
                    $ref: '#/components/examples/error403Forbidden'
    post:
      tags:
      - contributions
      summary: Adds a new Contribution to the HackerNews
      operationId: addContribution
      requestBody:
        description: Provide the title, the url (optional) & text (optional) of the new Contribution
        content:
          application/json:
            schema:
              required:
              - title
              - url
              - text
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
                  example: 'Contribution title'
                url:
                  type: string
                  format: url
                  nullable: true
                  example: 'https://www.contribution-url.com'
                text:
                  type: string
                  nullable: true
                  example: 'Contribution text'
        required: true
      responses:
        201:
          description: Contribution created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contribution'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorTitleEmptyExample:
                  $ref: '#/components/examples/error400TitleContribution'
                errorURLInvalidExample:
                  $ref: '#/components/examples/error400URLContribution'
        401:
            description: 'Error: Unauthorized'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorMissingAuthenticationExample:
                    $ref: '#/components/examples/error401UnauthorizedMissingAuthentication'
                  errorIncorrectAuthenticationExample:
                    $ref: '#/components/examples/error401UnauthorizedIncorrectAuthentication'
        409:
            description: 'Error: Conflict'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorURLExistenceExample:
                    $ref: '#/components/examples/error409Contribution'
                    
  /contributions/{contributionId}:
    get:
      tags:
      - contributions
      summary: Finds a Contribution by its ID
      operationId: getContributionById
      parameters:
      - name: contributionId
        in: path
        description: ID of Contribution to return
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contribution'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404Contribution'
                  
  /users/{userId}:
    get:
      tags:
      - users
      summary: Finds a User by its ID
      operationId: getUserbyId
      parameters:
      - name: userId
        in: path
        description: ID of User to return
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404User'
    put:
      tags:
      - users
      summary: Update a User of the HackerNews
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        description: ID of User to update
        required: true
        schema:
          type: integer
      requestBody:
        description: Provide the about of the User
        content:
          application/json:
            schema:
              required:
              - about
              type: object
              properties:
                about:
                  type: string
                  nullable: true
                  example: 'User about'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
            description: 'Error: Unauthorized'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorMissingAuthenticationExample:
                    $ref: '#/components/examples/error401UnauthorizedMissingAuthentication'
                  errorIncorrectAuthenticationExample:
                    $ref: '#/components/examples/error401UnauthorizedIncorrectAuthentication'
        403:
            description: 'Error: Forbidden'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorPrivilegeNotGrantedExample:
                    $ref: '#/components/examples/error403Forbidden'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404User'
  /comments:
    get:
        tags:
        - comments
        summary: Retrieves all the Comments created by one user (ordered by creation) or voted by one user
        operationId: getComments
        parameters:
        - name: user_id
          in: query
          description: Comment user to filter
          schema:
            type: integer
        - name: upvotedC
          in: query
          description: User to look for upvoted comments
          schema:
            type: integer
        responses:
          200:
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Comment'
          404:
            description: 'Error: Not Found'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorUserExample:
                    $ref: '#/components/examples/error404User'
                    
                    
          401:
            description: 'Error: Unauthorized'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorMissingAuthenticationExample:
                    $ref: '#/components/examples/error401UnauthorizedMissingAuthentication'
                  errorIncorrectAuthenticationExample:
                    $ref: '#/components/examples/error401UnauthorizedIncorrectAuthentication'
          403:
            description: 'Error: Forbidden'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorPrivilegeNotGrantedExample:
                    $ref: '#/components/examples/error403Forbidden'
    post:
      tags:
      - comments
      summary: Adds a new Contribution Comment to the HackerNews
      operationId: addComment
      requestBody:
        description: Provide the content of the new Comment and the id of the Contribution
        content:
          application/json:
            schema:
              required:
              - content
              - contr_id
              type: object
              properties:
                content:
                  type: string
                  minLength: 1
                  example: 'Comment content'
                contr_id:
                  type: integer
                  example: 1
        required: true
      responses:
        201:
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorContentEmptyExample:
                  $ref: '#/components/examples/error400ContentComment'
                errorContributionIdEmptyExample:
                  $ref: '#/components/examples/error400ContributionComment'
        401:
            description: 'Error: Unauthorized'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorMissingAuthenticationExample:
                    $ref: '#/components/examples/error401UnauthorizedMissingAuthentication'
                  errorIncorrectAuthenticationExample:
                    $ref: '#/components/examples/error401UnauthorizedIncorrectAuthentication'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404Contribution'
               
                    
  
  /tweets/{tweetId}:
    get:
      tags:
      - tweets
      summary: Finds a Tweet by its ID
      description: Returns a single Tweet
      operationId: getTweetById
      parameters:
      - name: tweetId
        in: path
        description: ID of Tweet to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contribution'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
    delete:
      tags:
      - tweets
      summary: Deletes a Tweet
      operationId: deleteTweet
      parameters:
      - name: tweetId
        in: path
        description: Tweet id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: Tweet deleted
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
      security:
      - ApiKeyAuth: []
  /tweets/{tweetId}/likes:
    post:
      tags:
      - tweets
      summary: Likes a Tweet
      operationId: likeTweet
      parameters:
      - name: tweetId
        in: path
        description: Tweet id to like
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Liked Tweet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contribution'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
components:
  schemas:
    Contribution:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          minLength: 1
          example: 'Contribution title'
        url:
          type: string
          format: url
          nullable: true
          example: 'https://www.contribution-url.com'
        text:
          type: string
          nullable: true
          example: ''
        created_at:
          type: string
          format: date-time
        tipus:
          type: string
          example: 'url'
        points:
          type: integer
          example: 0
        user:
          type: string
          format: email
          example: 'user@email.com'
        user_id:
          type: integer
          example: 1
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        about:
          type: string
          example: User about
        email:
          type: string
          example: example@gmail.com
        created_at:
          type: string
          format: date-time
        uid:
          type: string
          example: 115340955855334215894
    Comment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        content:
          type: string
          minLength: 1
          example: 'Comment content'
        user_id:
          type: integer
          example: 2
        contr_id:
          type: integer
          example: 3
        created_at:
          type: string
          format: date-time
    
    AddTweetResult:
      type: object
      properties:
        new_tweet:
          $ref: '#/components/schemas/Contribution'
        api_key:
          type: string
          example: "MjAyMC0wNC0xOCAxMjoyODo0MSBVVEM=\n"
    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum: [400, 401, 403, 404, 409]
        error: 
          type: string
          enum: ["Bad Request", "Unauthorized", "Forbidden", "Not Found", "Conflict"]
        message: 
          type: string
  examples:
    error404User:
      value:
        status: 404
        error: "Not Found"
        message: "No User with that user_id"
    error401UnauthorizedMissingAuthentication:
      value:
        status: 401
        error: "Unauthorized"
        message: "Missing authentication"
    error401UnauthorizedIncorrectAuthentication:
      value:
        status: 401
        error: "Unauthorized"
        message: "Incorrect authentication"
    error403Forbidden:
      value:
        status: 403
        error: "Forbidden"
        message: "Privilege not granted"
    error404Contribution:
      value:
        status: 404
        error: "Not Found"
        message: "No Contribution with that contribution_id"
    error409Contribution:
      value:
        status: 409
        error: "Conflict"
        message: "URL already exists"
    error400TitleContribution:
      value:
        status: 400
        error: "Bad Request"
        message: "Title cannot be empty"
    error400URLContribution:
      value:
        status: 400
        error: "Bad Request"
        message: "URL must be valid"
    error400ContentComment:
      value:
        status: 400
        error: "Bad Request"
        message: "Content cannot be empty"
    error400ContributionComment:
      value:
        status: 400
        error: "Bad Request"
        message: "Contr_id cannot be empty"
  
  
    error400:
      value:
        status: 400
        error: "Bad Request"
        message: "Content is too long (maximum is 280 characters)"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "You provided no api key (X-API-KEY Header)"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Your api key (X-API-KEY Header) is not valid"
    error404:
      value:
        status: 404
        error: "Not Found"
        message: "No Tweet with that ID"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-KEY #Custom headers in rails apps must have the X- prefix
      in: header
security:
  - ApiKeyAuth: []